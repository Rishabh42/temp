#include <boost/test/unit_test.hpp>

#include "uint256.h"
#include "util.h"
#include "utilstrencodings.h"
#include "ethereum/ethereum.h"
#include "ethereum/Common.h"
#include "ethereum/RLP.h"
#include "script/interpreter.h"
#include "script/standard.h"
#include "policy/policy.h"


std::string spv_tx_root = "a0e0653fb13c97c1b64a2ac57ec337f4fdd58bbdf6e85b3ef10836ce85b1b4b230";
std::string spv_parent_nodes = "f905e0f90131a02161bbe0a12ec3f3ef5dfbf22c0a2af9710737d4ddf027a8b433e67869bf7641a05a8fedecca981699375a22d7babcd2ccb6783e5e0ecc6dacb18f8e54387aada7a02a545630b35899a7feaeeb76b7edbf54cf75eb6cae7bda0568af74ad605d2a9ea0017861bcc299448915e68aee90ca7d56a5b9bb1e08c5830474eedc734be24f23a089accf9b2fa511b6c496b5a3457d850784cb8443f04b3bf39e406a1c461a6bbda092211596ada2cca557dd432ad170863169f19d90ef8e8c12cdd0a35249d63a7aa0951b186e2e07fe4619740fc6033dfcb759739c52c17ba4ab20c061cfe14428c4a0f6b3348d8f0f6d047bdb516d328a74a2d12192881899b238664850e9e36b4acea0f6e740d77c72742567009b694c2d70f843697f4945aa5714feeaf84f16afd8748080808080808080f901f180a00c550d1003baae82be01b3506c7c08b3d770354c4d06fde621970044ed31c67ca062ba5ab22a33e9290afa38777a6d01f3cf93b19ab46dbb1088cb6051122f46a7a08a87e8dbef3ba52bbeb80cbde58ec987eb05f8192caa42ab2e41424237a46abfa0dc4516674da99afb78dc3dcb1cd47de792706c14e58435cb9e7267a81802ae04a0919455ef7bd9d58e394c13bea7ec0287ccd1a429368133b43f8e7dddd1fabf7ca09cb488c3006285e7415cb82e4ad4997492cfe83454b02b63ec72a1b20546d806a06816792b5a84a4f2b2f7ccf72cdb84960862f3fe168af4daedc32c0908dc0d46a07cfeb528481702a2faebfc9383d79a8926d530f7238a02904ccf3f08d916bbeaa03f400897d6c8a40caae136ba479140e4df681158b7c04a1f7d0fc8d4f9f4e610a03c328b1ca60b809a9a9259b8115892d8eb7a2f980fd72c6e51703aa63d80c063a02c1da46c1bcc0f764d65c1a00a7159bf82e5f4958873ba78273730f0175b08f6a04c84eb91675a586aa557591d67ac40ecb31fa4ded320adace9bb4a773806f9c8a05ec874e0243dd0f17ce1dc75472265a36f209241cfdf6f6d41d8dfdcd1a10646a0928d67cbb5dc73d712217717117f40e97d7b507f76350b09c0f0c1ef88e1f6aea03237907eccf33358ecd9e70531cdac339a768ec1bf9b44d49a990e081003b20c80f902b520b902b1f902ae8322f2348504a817c80083061a80942a0c0dbecc7e4d658f48e01e3fa353f44050c20880b90244ef343588000000000000000000000000000000000000000000000000042bb6de2f37ed740000000000000000000000000000000000000000000000b56cfa9026c2d014e2000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000004f2ed303b000000000000000000000000000000000000000000000000042bb6de2f37ed74000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000395891247fb1600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000905e337c6c8645263d3521205aa37bf4d034e74500000000000000000000000078c8f089c9144095a68a7d5cacddc94709bcff01000000000000000000000000568f954b32ed7ec83fbb557012526941cfdf805f000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001b836a5cb471bad788edbe9df8186ad60cab9c77f43da321ae2fc11d57f9699af43e2b3897e1b9589d85475a2b19324277ac598a477b6eaa60e7c43ad89ce1685103ad79270e959e2b3d4ee71128f176aec0b861f59d1562214f23676e431124cf35a9cdd69e56291f35b36c86da43100b5e21abb74c20c5ce00f4c9b59b5fb0bf26a0a9184f8509d5212625d303a6c0c31f710889cea0c56773c31d4b6cb12738c720a01d57a51a568dfa39d31bb285a327af4345e793552c57706767a25cb5a2cb439d";    
std::string spv_value = "f902ae8322f2348504a817c80083061a80942a0c0dbecc7e4d658f48e01e3fa353f44050c20880b90244ef343588000000000000000000000000000000000000000000000000042bb6de2f37ed740000000000000000000000000000000000000000000000b56cfa9026c2d014e2000000000000000000000000000000000000000000000000000000000000271000000000000000000000000000000000000000000000000000000004f2ed303b000000000000000000000000000000000000000000000000042bb6de2f37ed74000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000038d7ea4c6800000000000000000000000000000000000000000000000000000395891247fb1600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000905e337c6c8645263d3521205aa37bf4d034e74500000000000000000000000078c8f089c9144095a68a7d5cacddc94709bcff01000000000000000000000000568f954b32ed7ec83fbb557012526941cfdf805f000000000000000000000000000000000000000000000000000000000000001c000000000000000000000000000000000000000000000000000000000000001b836a5cb471bad788edbe9df8186ad60cab9c77f43da321ae2fc11d57f9699af43e2b3897e1b9589d85475a2b19324277ac598a477b6eaa60e7c43ad89ce1685103ad79270e959e2b3d4ee71128f176aec0b861f59d1562214f23676e431124cf35a9cdd69e56291f35b36c86da43100b5e21abb74c20c5ce00f4c9b59b5fb0bf26a0a9184f8509d5212625d303a6c0c31f710889cea0c56773c31d4b6cb12738c720a01d57a51a568dfa39d31bb285a327af4345e793552c57706767a25cb5a2cb439d";
std::string spv_path = "0a";
class EthereumTestChecker : public BaseSignatureChecker
{
public:
    virtual bool CheckSig(const std::vector<unsigned char>& scriptSig, const std::vector<unsigned char>& vchPubKey, const CScript& scriptCode, SigVersion sigversion) const
    {
        return true;
    }

    virtual bool CheckEthHeader(const std::vector<unsigned char>& header) const {
        return VerifyHeader(header);
    }
};


BOOST_AUTO_TEST_SUITE(ethereum_tests)
/*
BOOST_AUTO_TEST_CASE(ethereum_blockheader)
{
    std::vector<unsigned char> header = ParseHex(block_header_data);
    bool verified = VerifyHeader(header);
    BOOST_CHECK(verified);
}

BOOST_AUTO_TEST_CASE(ethereum_evalscript)
{
    std::vector<std::vector<unsigned char> > stack;
    ScriptError err;
    EthereumTestChecker checker;
    CScript scriptPubKey = CScript()
            << ParseHex(block_header_data)
            << OP_SYSCOIN_UNLOCK;

    BOOST_CHECK_EQUAL(EvalScript(stack, scriptPubKey, STANDARD_SCRIPT_VERIFY_FLAGS, checker, SigVersion::BASE, &err), true);

    BOOST_CHECK_EQUAL(err, SCRIPT_ERR_OK);
}

BOOST_AUTO_TEST_CASE(ethereum_verifyscript)
{
    ScriptError err;
    EthereumTestChecker checker;
    CScript scriptSig = CScript()
            << ParseHex(block_header_data);
    CScript scriptPubKey = CScript()
            << OP_SYSCOIN_UNLOCK;

    BOOST_CHECK_EQUAL(VerifyScript(scriptSig, scriptPubKey, nullptr, STANDARD_SCRIPT_VERIFY_FLAGS, checker, &err), true);

    BOOST_CHECK_EQUAL(err, SCRIPT_ERR_OK);
}*/
BOOST_AUTO_TEST_CASE(ethereum_spvproof)
{
    const std::vector<unsigned char> &vchTxRoot = ParseHex(spv_tx_root);
    dev::RLP rlpTxRoot(&vchTxRoot);
    const std::vector<unsigned char> &vchParentNodes = ParseHex(spv_parent_nodes);
    dev::RLP rlpParentNodes(&vchParentNodes);
    const std::vector<unsigned char> &vchValue = ParseHex(spv_value);
    dev::RLP rlpValue(&vchValue);
    const std::vector<unsigned char> &vchPath = ParseHex(spv_path);
    BOOST_CHECK(VerifyProof(&vchPath, rlpValue, rlpParentNodes, rlpTxRoot));
    
}
BOOST_AUTO_TEST_SUITE_END()

